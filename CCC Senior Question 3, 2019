package sample;
import java.util.Scanner;

**mainClass**

public class Main{
    public static void main(String[] args){

        Scanner strScanner = new Scanner(System.in);
        String strGrid[][] = new String[3][3];
        String strInput = "";
        String[] strArray = new String[3];

        isInt check = new isInt();
        Solve solve = new Solve();
        PrintMultiArray print = new PrintMultiArray();
        checkCompletion checkArray = new checkCompletion();

        for (int i=0; i<3; i++)
        {
            strInput = strScanner.nextLine();
            strArray = strInput.split(" ");

            for (int j=0; j<3; j++)
            {
                if (strArray[j].equals("x") || check.checkInt(strArray[j]))
                {
                    strGrid[i][j] = strArray[j];
                }
                else
                {
                    System.out.println("Unknown input");
                }
            }
        }

        boolean incomplete = checkArray.incomplete(strGrid);

        while (incomplete)
        {
            for (int i = 0; i < 3; i++)
            {
                for (int j = 0; j < 3; j++)
                {
                    if (strGrid[i][j].equals("x"))
                    {
                        int x = j;
                        int y = i;
                        String solved = solve.decode(strGrid, x, y);
                        strGrid[i][j] = solved;
                    }
                }
            }
            incomplete = checkArray.incomplete(strGrid);
        }

        print.printArray(strGrid);
    }
}

**checkCompletionClass**

package sample;

public class checkCompletion {

    public boolean incomplete (String[][] array)
    {
        for (int i = 0; i < 3; i++)
        {
            for (int j = 0; j < 3; j++)
            {
                if (array[i][j].equals("x"))
                {
                   return true;
                }
            }
        }

        return false;
    }
}

**solveClass**
ackage sample;

public class Solve {

    public String decode(String[][] strGrid, int x, int y) {

        SolveProcess s = new SolveProcess();
        String output = "";

        if ((x == 0) && (y == 0))
        {
            output = s.solveCorner(strGrid[0][1], strGrid[0][2], strGrid[1][0], strGrid[2][0]);
        }
        else if ((x == 0) && (y == 1))
        {
            output = s.solveEdge(strGrid[0][0], strGrid[2][0], strGrid[1][1], strGrid[1][2]);
        }
        else if ((x == 0) && (y == 2))
        {
            output = s.solveCorner(strGrid[1][0], strGrid[0][0], strGrid[2][1], strGrid[2][2]);
        }
        else if ((x == 1) && (y == 0))
        {
            output = s.solveEdge(strGrid[0][0], strGrid[0][2], strGrid[1][1], strGrid[2][1]);
        }
        else if ((x == 1) && (y == 1))
        {
            output = s.solveMiddle(strGrid[0][1], strGrid[2][1], strGrid[1][0], strGrid[1][2]);
        }
        else if ((x == 1) && (y == 2))
        {
            output = s.solveEdge(strGrid[2][0], strGrid[2][2], strGrid[1][1], strGrid[0][1]);
        }
        else if ((x == 2) && (y == 0))
        {
            output = s.solveCorner(strGrid[0][1], strGrid[0][0], strGrid[1][2], strGrid[2][2]);
        }
        else if ((x == 2) && (y == 1))
        {
            output = s.solveEdge(strGrid[0][2], strGrid[2][2], strGrid[1][1], strGrid[1][0]);
        }
        else if ((x == 2) && (y == 2))
        {
            output = s.solveCorner(strGrid[2][1], strGrid[2][0], strGrid[1][2], strGrid[0][2]);
        }
        else
        {
            output = "error";
        }
        return output;
    }
}

**solveProcessClass**

package sample;

public class SolveProcess {

    public String solveCorner(String slot2, String slot3,String slot4, String slot5)
    {
        int intOutput = 0;
        String strOutput = "";
        int intConvert = 0;
        int intConvert2 = 0;
        int difference = 0;
        String unsolved = "x";
        boolean containsX = false;

        if (slot2.equals("x") || slot3.equals("x"))
        {
            containsX = true;
        }

        else
        {
            intConvert = Integer.parseInt(slot2);
            intConvert2 = Integer.parseInt(slot3);
            difference = Math.abs(intConvert - intConvert2);

            if (intConvert > intConvert2)
            {
                intOutput = intConvert += difference;
                strOutput = Integer.toString(intOutput);
                return strOutput;
            }

            else if (intConvert < intConvert2)
            {
                intOutput = intConvert -= difference;
                strOutput = Integer.toString(intOutput);
                return strOutput;
            }

            else
            {
                intOutput = intConvert; //difference = 0, output = intConvert & intConvert 2
                strOutput = Integer.toString(intOutput);
                return strOutput;
            }
        }

        if ((containsX) && (slot4.equals("x") || slot5.equals("x")))
        {
            return unsolved;
        }

        else
        {
            intConvert = Integer.parseInt(slot4);
            intConvert2 = Integer.parseInt(slot5);
            difference = Math.abs(intConvert - intConvert2);

            if (intConvert > intConvert2)
            {
                intOutput = intConvert += difference;
                strOutput = Integer.toString(intOutput);
                return strOutput;
            }

            else if (intConvert < intConvert2)
            {
                intOutput = intConvert -= difference;
                strOutput = Integer.toString(intOutput);
                return strOutput;
            }

            else
            {
                intOutput = intConvert; //difference = 0, output = intConvert & intConvert 2
                strOutput = Integer.toString(intOutput);
                return strOutput;
            }

        }
    }

    public String solveEdge(String slot2, String slot3,String slot4, String slot5)
    {
        int intOutput = 0;
        String strOutput = "";
        int intConvert = 0;
        int intConvert2 = 0;
        int difference = 0;
        String unsolved = "x";
        boolean containsX = false;

        if (slot2.equals("x") || slot3.equals("x"))
        {
            containsX = true;
        }

        else
        {
            intConvert = Integer.parseInt(slot2);
            intConvert2 = Integer.parseInt(slot3);
            difference = (Math.abs(intConvert - intConvert2))/2;

            if (intConvert > intConvert2)
            {
                intOutput = intConvert -= difference;
                strOutput = Integer.toString(intOutput);
                return strOutput;
            }

            else if (intConvert < intConvert2)
            {
                intOutput = intConvert += difference;
                strOutput = Integer.toString(intOutput);
                return strOutput;
            }

            else
            {
                intOutput = intConvert; //difference = 0, output = intConvert & intConvert 2
                strOutput = Integer.toString(intOutput);
                return strOutput;
            }

        }

        if ((containsX) && (slot4.equals("x") || slot5.equals("x")))
        {
            return unsolved;
        }

        else
        {
            intConvert = Integer.parseInt(slot4);
            intConvert2 = Integer.parseInt(slot5);
            difference = Math.abs(intConvert - intConvert2);

            if (intConvert > intConvert2)
            {
                intOutput = intConvert += difference;
                strOutput = Integer.toString(intOutput);
                return strOutput;
            }

            else if (intConvert < intConvert2)
            {
                intOutput = intConvert -= difference;
                strOutput = Integer.toString(intOutput);
                return strOutput;
            }

            else
            {
                intOutput = intConvert; //difference = 0, output = intConvert & intConvert 2
                strOutput = Integer.toString(intOutput);
                return strOutput;
            }

        }
    }

    public String solveMiddle(String slot2, String slot3,String slot4, String slot5)
    {
        int intOutput = 0;
        String strOutput = "";
        int intConvert = 0;
        int intConvert2 = 0;
        int difference = 0;
        String unsolved = "x";
        boolean containsX = false;

        if (slot2.equals("x") || slot3.equals("x"))
        {
            containsX = true;
        }

        else
        {
            intConvert = Integer.parseInt(slot2);
            intConvert2 = Integer.parseInt(slot3);
            difference = (Math.abs(intConvert - intConvert2))/2;

            if (intConvert > intConvert2)
            {
                intOutput = intConvert -= difference;
                strOutput = Integer.toString(intOutput);
                return strOutput;
            }

            else if (intConvert < intConvert2)
            {
                intOutput = intConvert += difference;
                strOutput = Integer.toString(intOutput);
                return strOutput;
            }

            else
            {
                intOutput = intConvert; //difference = 0, output = intConvert & intConvert 2
                strOutput = Integer.toString(intOutput);
                return strOutput;
            }

        }

        if ((containsX) && (slot4.equals("x") || slot5.equals("x")))
        {
            return unsolved;
        }

        else
        {
            intConvert = Integer.parseInt(slot4);
            intConvert2 = Integer.parseInt(slot5);
            difference = Math.abs(intConvert - intConvert2);

            if (intConvert > intConvert2)
            {
                intOutput = intConvert -= difference;
                strOutput = Integer.toString(intOutput);
                return strOutput;
            }

            else if (intConvert < intConvert2)
            {
                intOutput = intConvert += difference;
                strOutput = Integer.toString(intOutput);
                return strOutput;
            }

            else
            {
                intOutput = intConvert; //difference = 0, output = intConvert & intConvert 2
                strOutput = Integer.toString(intOutput);
                return strOutput;
            }

        }
    }
}

**isIntegerClass**

package sample;

public class isInt {

    public boolean checkInt(String str)
    {
        try {
            Integer.parseInt(str);
            return true;
        }
        catch(Exception a)
        {
            return false;
        }
    }
}

**printMultiArray**

package sample;

public class PrintMultiArray {

    public void printArray(String[][] multiArray)
    {
        for (int i=0; i<3; i++)
        {
            for (int j=0; j<3; j++)
            {
                System.out.print(multiArray[i][j] + " ");
            }
            System.out.println();
        }
    }
}

